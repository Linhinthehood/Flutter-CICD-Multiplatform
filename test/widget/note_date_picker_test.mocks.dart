// Mocks generated by Mockito 5.4.6 from annotations
// in notes/test/widget/note_date_picker_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:notes/models/note.dart' as _i3;
import 'package:notes/providers/note_provider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NoteProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteProvider extends _i1.Mock implements _i2.NoteProvider {
  MockNoteProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Note> get notes => (super.noSuchMethod(
        Invocation.getter(#notes),
        returnValue: <_i3.Note>[],
      ) as List<_i3.Note>);

  @override
  String get searchQuery => (super.noSuchMethod(
        Invocation.getter(#searchQuery),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#searchQuery),
        ),
      ) as String);

  @override
  Map<String, bool> get expandedSections => (super.noSuchMethod(
        Invocation.getter(#expandedSections),
        returnValue: <String, bool>{},
      ) as Map<String, bool>);

  @override
  bool get isUsingSemanticSearch => (super.noSuchMethod(
        Invocation.getter(#isUsingSemanticSearch),
        returnValue: false,
      ) as bool);

  @override
  Map<String, List<_i3.Note>> get groupedNotes => (super.noSuchMethod(
        Invocation.getter(#groupedNotes),
        returnValue: <String, List<_i3.Note>>{},
      ) as Map<String, List<_i3.Note>>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchNotes() => (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> searchNotes(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchNotes,
          [query],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void clearSearch() => super.noSuchMethod(
        Invocation.method(
          #clearSearch,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> addNote(
    String? title,
    String? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNote,
          [
            title,
            content,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateNote(_i3.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [note],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteNote(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addNoteWithMedia(_i3.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #addNoteWithMedia,
          [note],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> togglePinNote(_i3.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #togglePinNote,
          [note],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void toggleSection(String? monthKey) => super.noSuchMethod(
        Invocation.method(
          #toggleSection,
          [monthKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isSectionExpanded(String? monthKey) => (super.noSuchMethod(
        Invocation.method(
          #isSectionExpanded,
          [monthKey],
        ),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
